// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  ADMIN
  EDITOR
  GUEST
}

enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
  LAND
}

enum PropertyStatus {
  AVAILABLE
  UNDER_CONTRACT
  SOLD
  RENTED
}

enum TodoPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TodoStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum CampaignType {
  SOCIAL_MEDIA
  GOOGLE_ADS
  PRINT
  EVENT
  EMAIL
}

enum CampaignStatus {
  PLANNING
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum PostStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  SCHEDULED
  PUBLISHED
  REJECTED
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  VIEWING_SCHEDULED
  OFFER_MADE
  CLOSED
  LOST
}

enum LeadSource {
  WEBSITE
  SOCIAL_MEDIA
  REFERRAL
  COLD_CALL
  EVENT
}

enum NotificationType {
  TODO_DUE
  APPROVAL_NEEDED
  CAMPAIGN_UPDATE
  LEAD_ACTIVITY
  DEADLINE_APPROACHING
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
}

// Models

model User {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  email       String   @unique
  passwordHash String  @map("password_hash")
  role        UserRole @default(GUEST)
  avatarUrl   String?  @map("avatar_url")
  lastActive  DateTime @default(now()) @map("last_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  properties        Property[]
  createdTodos      Todo[]            @relation("TodoCreator")
  assignedTodos     Todo[]            @relation("TodoAssignee")
  campaigns         Campaign[]
  createdPosts      LinkedInPost[]    @relation("PostCreator")
  approvedPosts     LinkedInPost[]    @relation("PostApprover")
  leads             Lead[]
  todoComments      TodoComment[]
  postMedias        PostMedia[]
  leadProperties    LeadProperty[]
  campaignKpis      CampaignKPI[]
  notifications     Notification[]
  files             File[]

  @@map("users")
}

model Property {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  address     String
  type        PropertyType
  price       Decimal        @db.Decimal(12, 2)
  area        Decimal        @db.Decimal(8, 2)
  rooms       Int
  status      PropertyStatus @default(AVAILABLE)
  description String?
  features    String[]
  listingDate DateTime       @map("listing_date") @db.Date
  agentId     String         @map("agent_id") @db.Uuid
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")

  // Relations
  agent          User             @relation(fields: [agentId], references: [id])
  campaigns      Campaign[]
  leadProperties LeadProperty[]
  propertyImages PropertyImage[]

  @@map("properties")
}

model PropertyImage {
  id         String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId String @map("property_id") @db.Uuid
  imageUrl   String @map("image_url")
  caption    String?
  isPrimary  Boolean @default(false) @map("is_primary")
  sortOrder  Int     @default(0) @map("sort_order")

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_images")
}

model Todo {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String
  description String?
  priority    TodoPriority @default(MEDIUM)
  status      TodoStatus   @default(PENDING)
  assignedTo  String?      @map("assigned_to") @db.Uuid
  createdBy   String       @map("created_by") @db.Uuid
  dueDate     DateTime?    @map("due_date")
  tags        String[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  // Relations
  assignee    User?         @relation("TodoAssignee", fields: [assignedTo], references: [id])
  creator     User          @relation("TodoCreator", fields: [createdBy], references: [id])
  comments    TodoComment[]
  attachments TodoAttachment[]

  @@map("todos")
}

model TodoComment {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  todoId    String   @map("todo_id") @db.Uuid
  content   String
  authorId  String   @map("author_id") @db.Uuid
  parentId  String?  @map("parent_id") @db.Uuid
  mentions  String[] @db.Uuid
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  todo   Todo  @relation(fields: [todoId], references: [id], onDelete: Cascade)
  author User  @relation(fields: [authorId], references: [id])
  parent TodoComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies TodoComment[] @relation("CommentReplies")

  @@map("todo_comments")
}

model TodoAttachment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  todoId     String   @map("todo_id") @db.Uuid
  filename   String
  url        String
  fileType   String   @map("file_type")
  fileSize   Int      @map("file_size")
  uploadedBy String   @map("uploaded_by") @db.Uuid
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  // Relations
  todo Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@map("todo_attachments")
}

model Campaign {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  propertyId     String?        @map("property_id") @db.Uuid
  type           CampaignType
  status         CampaignStatus @default(PLANNING)
  budget         Decimal        @db.Decimal(10, 2)
  spent          Decimal        @default(0) @db.Decimal(10, 2)
  startDate      DateTime       @map("start_date") @db.Date
  endDate        DateTime       @map("end_date") @db.Date
  targetAudience String?        @map("target_audience")
  platforms      String[]
  createdBy      String         @map("created_by") @db.Uuid
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  // Relations
  property     Property?     @relation(fields: [propertyId], references: [id])
  creator      User          @relation(fields: [createdBy], references: [id])
  kpis         CampaignKPI[]
  linkedInPosts LinkedInPost[]

  @@map("campaigns")
}

model CampaignKPI {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId String  @map("campaign_id") @db.Uuid
  metric     String
  target     Decimal @db.Decimal(10, 2)
  current    Decimal @default(0) @db.Decimal(10, 2)
  unit       String
  updatedBy  String  @map("updated_by") @db.Uuid

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  updater  User     @relation(fields: [updatedBy], references: [id])

  @@map("campaign_kpis")
}

model LinkedInPost {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content       String
  hashtags      String[]
  scheduledDate DateTime?  @map("scheduled_date")
  status        PostStatus @default(DRAFT)
  createdBy     String     @map("created_by") @db.Uuid
  approvedBy    String?    @map("approved_by") @db.Uuid
  publishedAt   DateTime?  @map("published_at")
  campaignId    String?    @map("campaign_id") @db.Uuid
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relations
  creator   User        @relation("PostCreator", fields: [createdBy], references: [id])
  approver  User?       @relation("PostApprover", fields: [approvedBy], references: [id])
  campaign  Campaign?   @relation(fields: [campaignId], references: [id])
  media     PostMedia[]
  analytics PostAnalytics?

  @@map("linkedin_posts")
}

model PostMedia {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId     String   @map("post_id") @db.Uuid
  filename   String
  url        String
  mediaType  String   @map("media_type")
  fileSize   Int      @map("file_size")
  uploadedBy String   @map("uploaded_by") @db.Uuid
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  // Relations
  post     LinkedInPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  uploader User         @relation(fields: [uploadedBy], references: [id])

  @@map("post_media")
}

model PostAnalytics {
  id               String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  postId           String @unique @map("post_id") @db.Uuid
  views            Int    @default(0)
  likes            Int    @default(0)
  comments         Int    @default(0)
  shares           Int    @default(0)
  clickThroughRate Decimal @default(0) @map("click_through_rate") @db.Decimal(5, 2)
  engagement       Decimal @default(0) @db.Decimal(5, 2)

  // Relations
  post LinkedInPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("post_analytics")
}

model Lead {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  email          String
  phone          String?
  status         LeadStatus @default(NEW)
  source         LeadSource
  budgetMin      Decimal?   @map("budget_min") @db.Decimal(12, 2)
  budgetMax      Decimal?   @map("budget_max") @db.Decimal(12, 2)
  notes          String?
  lastContact    DateTime?  @map("last_contact")
  score          Int        @default(0)
  assignedAgent  String     @map("assigned_agent") @db.Uuid
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  // Relations
  agent           User             @relation(fields: [assignedAgent], references: [id])
  propertyInterests LeadProperty[]

  @@map("leads")
}

model LeadProperty {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  leadId     String   @map("lead_id") @db.Uuid
  propertyId String   @map("property_id") @db.Uuid
  addedBy    String   @map("added_by") @db.Uuid
  addedAt    DateTime @default(now()) @map("added_at")

  // Relations
  lead     Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id])
  user     User     @relation(fields: [addedBy], references: [id])

  @@unique([leadId, propertyId])
  @@map("lead_properties")
}

model Notification {
  id        String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String               @map("user_id") @db.Uuid
  type      NotificationType
  title     String
  message   String
  priority  NotificationPriority @default(MEDIUM)
  read      Boolean              @default(false)
  actionUrl String?              @map("action_url")
  createdAt DateTime             @default(now()) @map("created_at")
  expiresAt DateTime?            @map("expires_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model File {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  filename   String
  originalName String @map("original_name")
  mimeType   String   @map("mime_type")
  size       Int
  path       String
  url        String
  uploadedBy String   @map("uploaded_by") @db.Uuid
  uploadedAt DateTime @default(now()) @map("uploaded_at")

  // Relations
  uploader User @relation(fields: [uploadedBy], references: [id])

  @@map("files")
}